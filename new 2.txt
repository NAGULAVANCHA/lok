import java.math.BigInteger;
import java.util.Random;
import java.io.*;
public class RSA
{
private BigInteger p;
private BigInteger q;
private BigInteger N;
private BigInteger phi;
e
d
private Random r;
public RSA()
{
r=new Random()
p=BigInteger.probablePrime(bitlength,r);
q=BigInteger.probablePrime(bitlength,r);
N=p.multiply(q);
phi=p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
e=BigInteger.probablePrime(bitlength/2,r);
while(phi.gcd(e).compareTO(BigInteger.ONE)>0 && e.compareTO(phi)<0)
{
e.add(BigInteger.ONE);
}
d=e.modInverse(phi);
}
public static void main(String args[]) throws IOException
{
RSA rsa=new RSA()
DataInputStream in=new DataInputStream(System.in);
plain text
byte[] encrypted=rsa.encrypt(testsring.getBytes());
encrypted string in bytes bytesToString(encrypted)


private static String bytesToString(byte[] encrypted)
{
String test="";
for(byte b:encrypted)
{
test+=Byte.toString(b);
}
return test;
}
public byte[] encrypt(byte[] message)
{
return((new BigInteger(message)).modPow(e,N).toByteArray();
}
public byte[] decrypt(byte[] message)
{
return((new BigInteger(message){
return(new BigInteger(message)).modPow(d,N).toByteArray();
}}


